generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["fullTextSearch"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Member {
  id                String                 @id @default(uuid())
  // Auth info
  email             String                 @unique
  phone             String?                @unique
  password          String
  // Basic info
  role              Role
  name              String
  gender            Gender
  imgUrl            String?
  address           String?
  dateOfBirth       DateTime?              @db.Date
  identityNumber    String?
  identityImgUrls   String[]
  // Properties
  ownedProperties   Property[]
  // Live at Unit
  unit              Unit?                  @relation(fields: [unitId], references: [id])
  unitId            String?
  // Contacts
  contacts          MemberContacts[]       @relation("contact")
  contactWith       MemberContacts[]       @relation("contactWith")
  // Invoices
  invoices          Invoice[]
  payForUnits       Unit[]                 @relation(name: "payer")
  sentRequests      Request[]              @relation(name: "sender")
  receivedRequests  MemberReceiveRequest[]
  landlordContracts Contract[]             @relation(name: "landlord")
  tenantContracts   Contract[]             @relation(name: "tenant")
  sentReviews       Review[]               @relation(name: "author")
  reviews           Review[]               @relation(name: "member")
  notifications     Notification[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model MemberContacts {
  id            String  @id @default(uuid())
  type          Role
  isConnected   Boolean @default(false)
  // Relations
  contact       Member  @relation("contact", fields: [contactId], references: [id])
  contactId     String
  contactWith   Member  @relation("contactWith", fields: [contactWithId], references: [id])
  contactWithId String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([contactId, contactWithId])
}

model Property {
  id          String            @id @default(uuid())
  // Basic info
  name        String
  type        PropertyType      @default(SINGLE_UNIT)
  address     String
  ward        String
  district    String
  province    String
  imgUrls     String[]
  description String?           @db.Text
  // Relations
  ownerId     String
  owner       Member            @relation(fields: [ownerId], references: [id])
  amenities   PropertyAmenity[]
  units       Unit[]
  equipments  Equipment[]
  reviews     Review[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([name, ownerId])
}

model Unit {
  id             String         @id @default(uuid())
  // Basic info
  name           String
  area           Decimal
  price          Decimal
  deposit        Decimal
  description    String?
  status         UnitStatus     @default(GOOD)
  imgUrls        String[]
  isListing      Boolean        @default(false)
  startListingAt DateTime?
  endListingAt   DateTime?
  maxSlot        Int
  // Relations
  payer          Member?        @relation(name: "payer", fields: [payerId], references: [id])
  payerId        String?
  tenants        Member[]
  property       Property       @relation(fields: [propertyId], references: [id])
  propertyId     String
  invoices       Invoice[]
  contracts      Contract[]
  reviews        Review[]
  unitPriceLogs  UnitPriceLog[]
  unitFeatures   UnitFeature[]
  requests       Request[]
  equipments     Equipment[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([name, propertyId])
}

model UnitPriceLog {
  id       String            @id @default(uuid())
  value    Decimal
  price    Decimal
  category UnitPriceCategory
  status   Int               @db.SmallInt
  // Relations
  unit     Unit              @relation(fields: [unitId], references: [id])
  unitId   String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model UnitFeature {
  name  String @id @unique
  units Unit[]
}

model PropertyAmenity {
  name       String     @id @unique
  properties Property[]
}

model Equipment {
  id                     String             @id @default(uuid())
  // Basic info
  name                   String
  brand                  String?
  price                  Decimal?           @default(0)
  model                  String?
  serial                 String?
  dateOfInstallation     DateTime?
  description            String?
  maintainStatus         UnitStatus
  imgUrls                String[]
  // Relations
  category               String?
  Category               EquipmentCategory? @relation(fields: [category], references: [name])
  propertyId             String?
  property               Property?          @relation(fields: [propertyId], references: [id])
  unitId                 String?
  unit                   Unit?              @relation(fields: [unitId], references: [id])
  // Warranty info
  enableWarranty         Boolean            @default(false)
  warrantyExpirationDate DateTime? // If enableWarranty and is null -> Lifetime warranty
  Request                Request[]
}

model EquipmentCategory {
  name       String      @id @unique
  equipments Equipment[]
}

model Invoice {
  id       Int             @id @default(autoincrement())
  paid     Decimal?        @default(0)
  total    Decimal
  status   InvoiceStatus
  paidAt   DateTime?
  dueDate  DateTime        @db.Date
  category InvoiceCategory
  mergedId Int?
  // Relations
  unit     Unit            @relation(fields: [unitId], references: [id])
  unitId   String
  member   Member          @relation(fields: [memberId], references: [id])
  memberId String
  items    InvoiceItem[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model InvoiceItem {
  id          String  @id @default(uuid())
  description String
  price       Decimal
  amount      Decimal
  invoiceId   Int
  invoice     Invoice @relation(fields: [invoiceId], references: [id])
}

model Contract {
  id              Int            @id @default(autoincrement())
  status          ContractStatus @default(PENDING)
  price           Decimal
  deposit         Decimal
  template        String
  startDate       DateTime
  endDate         DateTime
  terminationDate DateTime?
  imgUrls         String[]

  // Relations
  landlord       Member        @relation(name: "landlord", fields: [landlordId], references: [id])
  landlordId     String
  landlordStatus RequestStatus @default(PENDING)
  tenant         Member        @relation(name: "tenant", fields: [tenantId], references: [id])
  tenantId       String
  tenantStatus   RequestStatus @default(PENDING)
  unit           Unit          @relation(fields: [unitId], references: [id])
  unitId         String
  requests       Request[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Request {
  id          String                 @id @default(uuid())
  name        String
  status      RequestStatus
  description String
  category    RequestCategory
  // Relations
  unitId      String?
  unit        Unit?                  @relation(fields: [unitId], references: [id])
  contractId  Int?
  contract    Contract?              @relation(fields: [contractId], references: [id])
  equipmentId String?
  equipment   Equipment?             @relation(fields: [equipmentId], references: [id])
  senderId    String
  sender      Member                 @relation(name: "sender", fields: [senderId], references: [id])
  receivers   MemberReceiveRequest[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model MemberReceiveRequest {
  memberId  String
  member    Member        @relation(fields: [memberId], references: [id])
  requestId String
  request   Request       @relation(fields: [requestId], references: [id])
  status    RequestStatus

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@id([requestId, memberId])
}

model Review {
  id         String    @id @default(uuid())
  rating     Float
  comment    String?
  // Relations
  property   Property? @relation(fields: [propertyId], references: [id])
  propertyId String?
  unit       Unit?     @relation(fields: [unitId], references: [id])
  unitId     String?
  member     Member?   @relation(name: "member", fields: [memberId], references: [id])
  memberId   String?
  author     Member    @relation(name: "author", fields: [authorId], references: [id])
  authorId   String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Notification {
  id         String    @id @default(uuid())
  title      String
  content    String
  isRead     Boolean   @default(false)
  receiverId String
  receiver   Member    @relation(fields: [receiverId], references: [id])
  createdAt  DateTime  @default(now())
  deletedAt  DateTime?
  requestId  String?
  contractId String?

  @@index([requestId, contractId])
}

// ################################ ENUMS ################################
enum Gender {
  MALE
  FEMALE
}

enum Role {
  ADMIN
  LANDLORD
  TENANT
  SERVICE_WORKER
}

enum ContactType {
  TENANT
  SERVICE_WORKER
}

enum PropertyType {
  SINGLE_UNIT
  MULTIPLE_UNIT
}

enum UnitStatus {
  GOOD
  MAINTAINING
  BAD
}

enum InvoiceStatus {
  PENDING
  PAID
  PARTIAL
  OVERDUE
  MERGED
}

enum InvoiceCategory {
  MERGED
  UNIT_CHARGE
  UNIT_PRICE_LOG
  DEPOSIT
  DEPOSIT_REFUND
}

enum RequestCategory {
  UNIT_LEASE
  REPORT_ISSUE
  REQUEST_EQUIPMENT
  EQUIPMENT_WARRANTY
  TERMINATE_CONTRACT
}

enum RequestStatus {
  PENDING
  ACCEPTED
  REJECTED
  HANDLING
  DONE
}

enum ContractStatus {
  ACTIVE
  PENDING
  EXPIRED
  REJECTED
}

enum UnitPriceCategory {
  WATER
  ELECTRICITY
}
